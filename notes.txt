Create a new repository on the command line
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Push an existing repository from the command line
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Stuff to try:
I had a difficult time pushing data to the git repo until I typed:
git pull https://github.com/rlholland/gitnotes.git
This merged the remote with my local. I was able to push afterward.

I have also deleted the remote repository after cloning it locally then
creating a remote empty repository and pushing back to it by typing
git push --set-upstream origin master

If you want to make another version of your files just make a branch.
To create a new branch type:
	git branch newbranchname
Git will automatically copy the master repo into your new branch.
Change into the new branch by typing:

	git checkout newbranchname

You can make changes without disturbing the master
files. If all goes well you can merge your changes into the master branch.

To merge your new branch into master, first go to the master branch
by typing: git checkout master

 then type:

	git merge branchname

The master branch will now have the same changes as branchname

If you want to delete the branch (make sure you are on the master branch) type:
	git branch -D branchname

If you want to see all of the branches:
	git branch -a
	git branch show-all <-- Doesn't seem to show all branches unless you have checked them out at some point.

If you want to see only the remote branches:
	git branch -r

If you want to see only local branches:
	git branch

If you want to see the branches along with the latest commit message:
	git branch -v

How to find out if one branch has all of the commits of another branch.
	git branch --merged
	(This will show a list of all of the branches that contain what is in your current branch. This will allow you to delete the other matching branches without causing any harm).

Using fast-forward vs true merge
	Example: If you make a new branch from master and make changes to the new branch without making any changes to master, then merge the new changes into master, you are doing a fast forward merge. No new commit will need to be made because you are just adding more or to "updating" master.

	If you make a new branch and make changes to the new branch and also make changes to master and do a merge then you are doing a true merge and you will have to specify the differences that you want to keep and discard.

Comparing Branches
	git diff master..newbranch
		(The order doesn't matter. The diff above matches the one below)
	git diff newbranch..master

A different view for diff.
	git diff --color-words newbranch..master

If you want to compare two branches but not the latest commit of one branch (the previous commit).
	git --color-words master..newbranch^

Rename branches:
	git -m or git --move
	git -m oldbranchname newbranchname

If you want to commit a file and add a message:
	commit --message="This is my message." "filename.txt"



If you want to push all changes:
	push --all "https://github.com/rlholland/reponame.git"

A good Git log command to show a lot of detail is:
	git log --graph --oneline --decorate -all

If you want to see the log for a specific branch type:
	git log specificbranch --oneline -3 (the -3 shows the latest 3 logs)


Configure the prompt to show the git branch when in a git repo:
	export PS1='\W$(__git_ps1 "(%s)") > '
	The \W will show the pwd information before the branch is displayed. When you are not in a git repo the pwd information will still show.

	If you want to see the current prompt string "PS1" settings type "echo $PS1"



