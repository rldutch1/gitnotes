Create a new repository on the command line
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Push an existing repository from the command line
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Stuff to try:
I had a difficult time pushing data to the git repo until I typed:
git pull https://github.com/rlholland/gitnotes.git
This merged the remote with my local. I was able to push afterward.

I have also deleted the remote repository after cloning it locally then
creating a remote empty repository and pushing back to it by typing
git push --set-upstream origin master

If you want to make another version of your files just make a branch.
To create a new branch type:
	git branch newbranchname
Git will automatically copy the master repo into your new branch.
Change into the new branch by typing:

	git checkout newbranchname

	git checkout -b newbranchname : Will create the new branch and change into it.

You can make changes without disturbing the master
files. If all goes well you can merge your changes into the master branch.

To merge your new branch into master, first go to the master branch
by typing: git checkout master

 then type:

	git merge branchname

The master branch will now have the same changes as branchname

To back out of a merge conflict type:
	git merge --abort
	This will leave your changes alone and not do the merge.

If you want to delete the branch (make sure you are on the master branch) type:
	git branch -D branchname

If you want to see all of the branches:
	git branch -a
	git branch show-all <-- Doesn't seem to show all branches unless you have checked them out at some point.

If you want to see only the remote branches:
	git branch -r

If you want to see only local branches:
	git branch

If you want to see the branches along with the latest commit message:
	git branch -v

How to find out if one branch has all of the commits of another branch.
	git branch --merged
	(This will show a list of all of the branches that contain what is in your current branch. This will allow you to delete the other matching branches without causing any harm).

Comparing Branches
	git diff master..newbranch
		(The order doesn't matter. The diff above matches the one below)
	git diff newbranch..master

A different view for diff.
	git diff --color-words newbranch..master

If you want to compare two branches but not the latest commit of one branch (the previous commit).
	git --color-words master..newbranch^

Rename branches:
	git -m or git --move
	git -m oldbranchname newbranchname

Using fast-forward vs true merge
	Example: If you make a new branch from master and make changes to the new branch without making any changes to master, then merge the new changes into master, you are doing a fast forward merge. No new commit will need to be made because you are just adding more or to "updating" master.

	If you make a new branch and make changes to the new branch and also make changes to master and do a merge then you are doing a true merge and you will have a merge conflict and will need to specify the differences that you want to keep or discard.

If you want to specify a merge tool to use when merging files you can do so by typing:
	git mergetool --tool=NameOfMergeTool

Process Tracking
	Process tracking is when you merge the master branch into your working branch to update your working branch with new stuff from the master branch. This help you reduce the number of merge conflicts that occur when you finally have to merge your changes back into master.

Stash/Stashing
	A stash is not a commit and they do not have a SHA associated with them. You use "stash" when you are in one branch then try to checkout another branch without first saving the changes for the branch you are in. You will get a message telling you that you will lose the changes that you have already made. You can save them by stashing them and then continue to checkout the other branch.

	To stash type:
	git stash save "Message for stash."

If you want to see a list of items in the stash type:
	git stash list

	You will see stash{0}, stash{1}, etc. It doesn't matter which branch you are on, you will still be able to see the stash and pull it out of the stash. This is helpful if you realize you are making changes to the wrong branch. Just stash the changes and checkout the branch you need to apply the changes to and apply the stash.

	If you want to see a particular stash, you will have to reference it by its number. For example: If I wanted to see what was in stash{0} I would type:
		git stash show stash@{0}
	To see the stash in a more detailed way (diff), you will have to use the "Patch" option. Type:
		git stash show -p stash@{0}

If you want to commit a file and add a message:
	commit --message="This is my message." "filename.txt"

If you want to see a particular commit type:
	git show [SHA Key]

If you want to push all changes:
	push --all "https://github.com/rlholland/reponame.git"

A good Git log command to show a lot of detail is:
	git log --graph --oneline --decorate -all

If you want to see the log for a specific branch type:
	git log specificbranch --oneline -3 (the -3 shows the latest 3 logs)


Configure the prompt to show the git branch when in a git repo:
	export PS1='\W$(__git_ps1 "(%s)") > '
	The \W will show the pwd information before the branch is displayed. When you are not in a git repo the pwd information will still show.

	If you want to see the current prompt string "PS1" settings type "echo $PS1"



