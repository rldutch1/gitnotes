Create a new repository on the command line
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Push an existing repository from the command line
git remote add origin https://github.com/username/reponame.git
git push -u origin master

Stuff to try:
I had a difficult time pushing data to the git repo until I typed:
git pull https://github.com/rlholland/gitnotes.git
This merged the remote with my local. I was able to push afterward.

I have also deleted the remote repository after cloning it locally then
creating a remote empty repository and pushing back to it by typing
git push --set-upstream origin master

If you want to make another version of your files just make a branch.
To create a new branch type:
	git branch newbranchname
Git will automatically copy the master repo into your new branch.
Change into the new branch by typing:

	git checkout newbranchname

	git checkout -b newbranchname : Will create the new branch and change into it.

You can make changes without disturbing the master
files. If all goes well you can merge your changes into the master branch.

To merge your new branch into master, first go to the master branch
by typing: git checkout master

 then type:

	git merge branchname

The master branch will now have the same changes as branchname

To back out of a merge conflict type:
	git merge --abort
	This will leave your changes alone and not do the merge.

If you want to delete the branch (make sure you are on the master branch) type:
	git branch -D branchname

If you want to see all of the branches:
	git branch -a
	git branch show-all <-- Doesn't seem to show all branches unless you have checked them out at some point.

If you want to see only the remote branches:
	git branch -r

If you want to see only local branches:
	git branch

If you want to see the branches along with the latest commit message:
	git branch -v

How to find out if one branch has all of the commits of another branch.
	git branch --merged
	(This will show a list of all of the branches that contain what is in your current branch. This will allow you to delete the other matching branches without causing any harm).

Comparing Branches
	git diff master..newbranch
		(The order doesn't matter. The diff above matches the one below)
	git diff newbranch..master

A different view for diff.
	git diff --color-words newbranch..master

If you want to compare two branches but not the latest commit of one branch (the previous commit).
	git --color-words master..newbranch^

Rename branches:
	git -m or git --move
	git -m oldbranchname newbranchname

Using fast-forward vs true merge
	Example: If you make a new branch from master and make changes to the new branch without making any changes to master, then merge the new changes into master, you are doing a fast forward merge. No new commit will need to be made because you are just adding more or to "updating" master.

	If you make a new branch and make changes to the new branch and also make changes to master and do a merge then you are doing a true merge and you will have a merge conflict and will need to specify the differences that you want to keep or discard.

If you want to specify a merge tool to use when merging files you can do so by typing:
	git mergetool --tool=NameOfMergeTool

Process Tracking
	Process tracking is when you merge the master branch into your working branch to update your working branch with new stuff from the master branch. This help you reduce the number of merge conflicts that occur when you finally have to merge your changes back into master.

Stash/Stashing
	A stash is not a commit and they do not have a SHA associated with them. You use "stash" when you are in one branch then try to checkout another branch without first saving the changes for the branch you are in. You will get a message telling you that you will lose the changes that you have already made. You can save them by stashing them and then continue to checkout the other branch.

	To stash type:
	git stash save "Message for stash."

If you want to see a list of items in the stash type:
	git stash list

	You will see stash{0}, stash{1}, etc. It doesn't matter which branch you are on, you will still be able to see the stash and pull it out of the stash. This is helpful if you realize you are making changes to the wrong branch. Just stash the changes and checkout the branch you need to apply the changes to and apply the stash.

	If you want to see a particular stash, you will have to reference it by its number. For example: If I wanted to see what was in stash{0} I would type:
		git stash show stash@{0}
	To see the stash in a more detailed way (diff), you will have to use the "Patch" option. Type:
		git stash show -p stash@{0}

To take the stash out of the stash repository you can use two commands,
	git stash pop
	git stash apply

Delete single items that are in the stash type:
	git stash drop stash{0}

Delete all items in the stash by typing:
	git stash clear

	The difference is that git stash pop will remove the stash from the stash repository and git stash apply will leave a copy in the stash repository.
If you want to commit a file and add a message:
	commit --message="This is my message." "filename.txt"

If you want to see a particular commit type:
	git show [SHA Key]

If you want to see all of the branches on the remote type:
	git remote
	git remote -v (more verbose information)

If you want to add a remote repository type:
	git remote add <alias> <url>
	Example: git remote add origin https://github.com/rlholland/reponame.git
	You don't have to use the name "origin" you can change it if you want.

If you want to remove a remote repository type:
	git remote rm remoterepositoryname
	Example: git remote rm origin

If you want to look at the remote SHA you can type:
	cat .git/refs/remotes/origin/master
	This will show you the latest SHA on the remote

If you want to see what branches git is tracking type:
	cat .git/config
	git push -u origin master (The -u tells git to track this branch)

	If you have a branch that is not tracking you can add it to be tracked by typing:
		git config branch.branchname.remote origin
		or
		git config branch.branchname.merge refs/heads/master
		or
		git branch --set-upstream branchname origin/branchname (The works with version 1.7 and later).

If you want to clone a remote repository into a folder that you name type:
	git clone https://github.com/rlholland/reponame.git newlocalfoldername
	You can also clone a specific branch by using the -b option.
	Example:

If you want to push all changes:
	git push --all "https://github.com/rlholland/reponame.git"

A good Git log command to show a lot of detail is:
	git log --graph --oneline --decorate -all

If you want to see the log for a specific branch type:
	git log specificbranch --oneline -3 (the -3 shows the latest 3 logs)

If you want to see the log differences in patch mode type:
	git log -p branchname..origin/branchname

Git Fetch
	This synchronizes any remote branches we don't have locally so when you type git branch it will show you all of the branches.

	If you want to fetch type:
		git fetch origin
		If you are tracking you don't need to type the "origin" just type:
		git fetch

Three basic guidelines:
	Always fetch before you work.
	Fetch before you push
	Fetch often
	You can also use "git pull"

Git Pull
	git pull does the same thing as git fetch except it automatically does the merge.
	git pull = git fetch + git merge

Checkout Remote Branches
These commands will checkout the branch and track them.
	git branch newbranchname HEAD
	git branch newbranchname anycommitSHA
	git branch newbranchname origin/branchname

To delete a remote branch use a colon.
	git push origin :branchname

	A little information history on the git push command. It used to be done like this: git push origin branchname:branchname. The colon between them means that you are telling git to push to origin the local branchname to the remote branchname. If you don't specify the colon and you only have one branchname, git assumes they are the same.

	So the git push origin :branchname means to push to origin nothing locally to the remote branchname. The remote branchname is now getting nothing pushed to it and is deleted.

	The new way to delete a branch is:
		git push origin --delete branchname

If you want to modify someones elses code that you find on GitHub, you will have to "Fork" it then make your changes. Once you are done with your changes, you can create a "Pull Request" so that the original owner can look at your code and decide to incorporate it into theirs.

Configure the prompt to show the git branch when in a git repo:
	export PS1='\W$(__git_ps1 "(%s)") > '
	The \W will show the pwd information before the branch is displayed. When you are not in a git repo the pwd information will still show.

	If you want to see the current prompt string "PS1" settings type "echo $PS1"

